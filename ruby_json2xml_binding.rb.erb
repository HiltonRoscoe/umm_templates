<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet   xpath-default-namespace="http://www.w3.org/2005/xpath-functions" xmlns="<%= @locals[:target_schema] %>" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cdf="<%= @locals[:target_schema] %>" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns:array="http://www.w3.org/2005/xpath-functions/array" xmlns:map="http://www.w3.org/2005/xpath-functions/map" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:err="http://www.w3.org/2005/xqt-errors" exclude-result-prefixes="array cdf fn map math xhtml err xs" version="3.0">
	<xsl:output method="xml" version="1.0" encoding="UTF-8" indent="yes"/>
  	<!-- the root node must be XML, meaning the JSON must be nested in XML (not ideal) -->
  <xsl:template match="root" priority="1">
		<xsl:variable name="xml">
      <ElectionReport>
			  <xsl:apply-templates select="json-to-xml(.)"/>
      </ElectionReport>
		</xsl:variable>
		<xsl:copy-of select="$xml"/>
	</xsl:template>
  <% require 'active_support/inflector'
%>
<% xml_schema_stereotype = @all_packages.collect{|p| p.applied_stereotypes}.flatten.find{|s| s.name == 'XML Schema'}
  @outer_module = @locals[:outer_module] || 'OuterModule'
  id_suffix = xml_schema_stereotype.applied_tags.find{|t| t.name == 'id_suffix_for_references'}.value rescue 'Id'
  plural_id_suffix = xml_schema_stereotype.applied_tags.find{|t| t.name == 'id_suffix_for_plural_references'}.value rescue 'Ids'
  version = @locals[:version]
  version ||= 'v' + @all_packages.collect{|p| p.applied_stereotypes}.flatten.find{|s| s.name == 'XML Schema'}.applied_tags.find{|t| t.name == 'major_version'}.value rescue nil
  raise "You must specify a version for the domain model" unless version
  # Gets the standardized name for a given property. The standardized name should match what was generated
  # during XSD or JSON Schema generation
  # Params:
  # +property+:: The UMM property
  # +singular_id_suffix:: The suffix used for singular Identifier references
  # +plural_id_suffix:: The suffix used for plural Identifier references
  # +pluralize_roles:: Whether role names should be pluralized
  # +underscore:: Whether CamelCase should be converted to under_score
  def get_property_name(property, singular_id_suffix, plural_id_suffix, pluralize_roles = false, underscore = false)
  	name = property.name
    name ||= property.type.name
    name = name.underscore if underscore
    if property.association? && !(property.attribute? || property.composite?)
      id_suffix = property.multiple? ? plural_id_suffix : singular_id_suffix
      name = name + id_suffix 
    else
      name = name.pluralize if property.multiple? && pluralize_roles 
    end
    name 
  end

  # Gets the JSON type given a property.
  # Params:
  # +property+:: The UMM property
  def get_property_type(property)
    if !(property.type.primitive? || property.type.enumeration? || (property.association? && !(property.attribute?) && !(property.composite?))) # This may not cover all necessary cases
      "map"
    elsif property.type.primitive? && [UmlMetamodel::PRIMITIVES[:integer],UmlMetamodel::PRIMITIVES[:float], UmlMetamodel::PRIMITIVES[:double]].include?(property.type.base_primitive)
      "number"
    elsif property.type.primitive? && [UmlMetamodel::PRIMITIVES[:boolean]].include?(property.type.base_primitive)
      "boolean"
    else
      "string"
    end
  end
  # Determines the order that properties should appear in the output. XSD uses 
  # sequences and elements must appear in a certain order
  # Params:
  # +klass+:: The UMM Class
  # +property+:: The UMM property
  def get_sortable_prop_name(klass, property)
    klass_has_simple_content = klass.properties.any?{|p| p.applied_stereotypes.any?{|s| s.name == 'simpleContent'}} 
    is_xml_attribute = (klass_has_simple_content &&  !property.applied_stereotypes.any?{|s| s.name == 'simpleContent' }) || property.applied_stereotypes.any?{|s| s.name == 'xmlAttribute'} 
    standardized_property = (property.name || property.type.name).underscore    
    if is_xml_attribute
      ' ' + standardized_property #use low ASCII table character to sort ahead of everything else
    # for items supposed to appear together, make them sort after their ancestor by adding a space
    elsif standardized_property == 'other_type'
      'type '
    elsif standardized_property == 'end_time'
      'start_time '
    elsif standardized_property == 'end_date'
      'start_date '
    elsif standardized_property == 'other_vote_variation'
      'vote_variation '
    elsif standardized_property == 'sequence_end'
      'sequence_start '
    elsif standardized_property == 'is_test'
      'issuer_abbreviation '
    else
      standardized_property
    end
  end

%>

<% @all_packages.each do |package| %>
<% package.classes.sort_by{|c|c.name}.each do |klass| %>
<%# the not ensures we don't match any parent types, we will call them explicitly %>
<%# abstracts should have no match!%>
  <xsl:template name="cdf:<%= klass.name %>" match="*[string = '<%= package.name %>.<%= klass.name %>' and string/@key = '@type']"<%if klass.children.any?%> priority="-1" <%end%>>
    <xsl:param name="set_type" select="true()" />
<% if klass.parents.empty? && klass.properties.any?{|property| property.association? && property.opposite.is_navigable && !property.opposite.composite? } %>
    <xsl:attribute name="ObjectId">
      <xsl:value-of select="string[@key = '@id']" />
    </xsl:attribute>
<% end %>
<%if klass.parents.any?%>
  <%# Call parent class' template %>
  <%# Must have a xsi:type, so add now %>
    <xsl:if test="$set_type">
      <xsl:attribute name="xsi:type"><%= klass.name %></xsl:attribute>
    </xsl:if>
    <xsl:call-template name="cdf:<%=klass.parents.first.name%>">       
      <xsl:with-param name="set_type" select="false()" />
    </xsl:call-template>
<% end %>
<%# Begin UML property enumeration %>
<% klass.properties.sort_by{|p|get_sortable_prop_name(klass,p)}.each do |property| %>
<%# Avoid properties (associations) from other direction %>
<% next unless property.is_navigable %>
<% property_name = get_property_name(property, id_suffix, plural_id_suffix) %>
<% klass_has_simple_content = klass.properties.any?{|p| p.applied_stereotypes.any?{|s| s.name == 'simpleContent'}} %>
<% is_xml_attribute = (klass_has_simple_content && !property.applied_stereotypes.any?{|s| s.name == 'simpleContent' }) || property.applied_stereotypes.any?{|s| s.name == 'xmlAttribute'} %>
<%# determine if we need to output the property %>
<% if is_xml_attribute %>
    <xsl:if test="boolean(*[@key = '<%= property_name %>'])">  
<% elsif property.applied_stereotypes.any?{|s| s.name == 'simpleContent' } %>
    <xsl:value-of select="*[@key = '<%= property_name %>']" />
<% next %>
<% else %>
  <xsl:if test="boolean(*[@key = '<%= property_name %>'])">
<% end %>
    <%# if it is an array, then we need to apply special logic %>
    <% calculated_data_type = property.multiple? ? 'array' : get_property_type(property) %>
    <% is_idrefs = !property.composite? && property.association? %>
        <% if property.multiple? %>
          <% if is_idrefs %>
          <%# handle the use of IDREFS, which must map to arrays %>
            <<%= property_name %>>
              <xsl:variable name="idrefs">
              <xsl:for-each select="*[@key = '<%=property_name%>']/string">
          <% else %>
              <xsl:for-each select="*[@key = '<%= property_name %>']/<%=get_property_type(property)%>"> 
          <% end %>
          <% if get_property_type(property) == 'map' %>
            <%# use anonynomous map %>
            <<%= property_name %>>
              <xsl:apply-templates select="." />
            </<%= property_name %>>
          <% elsif is_xml_attribute || is_idrefs %>         
              <xsl:value-of select="concat(' ', .)" />         
          <% elsif property.type.primitive? %>
            <<%= property_name %>>    
              <xsl:value-of select="."/>
            </<%= property_name %>>    
          <% else %>
            <<%= property_name %>>    
              <xsl:value-of select="*[@key = '<%= property_name %>']"/>
            </<%= property_name %>>    
          <% end %>                        
          </xsl:for-each>
          <%# handle closure of idrefs (one for all array items)%>
          <% if is_idrefs %>
            </xsl:variable>
            <xsl:value-of select="normalize-space($idrefs)" />
            </<%= property_name %>>
          <% end %>
        <%# Single %>
        <%else%>
        <%# Add extra conditional, because we only need tags for non-XML attributes %>
        <% if is_xml_attribute %>
            <xsl:attribute name="<%= property_name %>">
              <xsl:value-of select="*[@key = '<%= property_name %>']" />
            </xsl:attribute>
        <%else%>
          <<%= property_name %>>
            <% if get_property_type(property) == 'map' %>
              <xsl:apply-templates select="*[@key = '<%= property_name %>']" />
            <% else %>
              <xsl:value-of select="*[@key = '<%= property_name %>']"/>
            <% end %>
          </<%= property_name %>>
          <% end %>
        <% end %>
</xsl:if>
<% end %>
  </xsl:template>
<% end %>
<% end %>
</xsl:stylesheet>