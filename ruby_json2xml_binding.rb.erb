<%#
  This template is used to convert Ruby Metamodels (exported from MagicDraw) into XSLT3+ based JSON to XML conversion
  scripts. 
  
  Locals:
  +root_class+:: The root class in the UML Model
  +target_schema+:: Target schema namespace
    
  Some notes:
  - There is no attempt to provide "pretty" XSLT output using this spreadsheet, use a postprocessing step instead
  - This script now generates namespace prefixed output. If you don't like that, use a postprocessing step
  - There are some unavoidable hardcodings to support VRI

%>
<?xml version="1.0" encoding="UTF-8"?>
<% require 'active_support/inflector'
   require 'digest'
   require_relative 'helpers'
%>
<% 
  # Ensure required locals are defined
  raise "You must specify locals target_schema for the domain model" unless @locals[:target_schema]  
  version = @locals[:version]
  # looks at all packages, maybe not a great idea?
  version ||= @all_packages.collect{|p| p.applied_stereotypes}.flatten.find{|s| s.name == 'XML Schema'} \
    .applied_tags.find{|t| t.name == 'major_version'}.value rescue nil
  raise "You must specify a version for the domain model" unless version
  %>
<%# Tracking header %>
<%
  # This code runs during ERB processing
  template_content = File.read(__FILE__)  # Read the current file (ERB template)
  hash = Digest::MD5.hexdigest(template_content)  # Generate a hash
%>
<!-- This file was generated using the umm_template <%=File.basename(__FILE__)%> (md5: <%=hash %>)
<% @locals.each do |key, value| %>
  <%= key %>=<%=value%>
<%end%>
 -->

<%  
  xml_packages = @all_packages.map do |package|  
  xml_schema_stereotype = package.applied_stereotypes.find{|s| s.name == 'XML Schema'}
  if xml_schema_stereotype
    id_suffix = xml_schema_stereotype.applied_tags.find{|t| t.name == 'id_suffix_for_references'}.value rescue 'Id'
    plural_id_suffix = xml_schema_stereotype.applied_tags.find{|t| t.name == 'id_suffix_for_plural_references'}.value rescue 'Ids'
    ns_prefix = xml_schema_stereotype.applied_tags.find{|t| t.name == 'prefix'}.value rescue 'unk'
    ns_raw = xml_schema_stereotype.applied_tags.find{|t| t.name == 'targetNamespace'}.value rescue 'unk'
    ns = ns_raw.gsub("<MAJOR_VERSION>", version)
    {
      id_suffix: id_suffix,
      plural_id_suffix: plural_id_suffix,
      ns_prefix: ns_prefix,
      ns: ns
    }
  end
end 
%>  
 
<xsl:stylesheet xml:id="json2xml" xpath-default-namespace="http://www.w3.org/2005/xpath-functions" 
    <%# output each XML Schema's namespace and prefix from XML Schema stereotype %>
    <% xml_packages.each do |data| %>
      xmlns:<%=data[:ns_prefix]%>="<%=data[:ns]%>"
    <% end %>
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="3.0">
	<xsl:output method="xml" version="1.0" encoding="UTF-8" indent="yes"/>
  <xsl:template name="start" match=".[. instance of map(*)]" priority="1">
	<xsl:variable name="xml" select=". => serialize(map { 'method' : 'json' }) => json-to-xml()" />
<% @all_packages.each do |package|  
  xml_schema_stereotype = package.applied_stereotypes.find{|s| s.name == 'XML Schema'}
  if xml_schema_stereotype 
  ns_prefix = xml_schema_stereotype.applied_tags.find{|t| t.name == 'prefix'}.value rescue 'unk'
  id_suffix = xml_schema_stereotype.applied_tags.find{|t| t.name == 'id_suffix_for_references'}.value rescue 'Id'
  plural_id_suffix = xml_schema_stereotype.applied_tags.find{|t| t.name == 'id_suffix_for_plural_references'}.value rescue 'Ids'
  %>
    <%      
      # Determine root classes (those with a <<Root>> stereotype applied)
      root_classes = package.classes.select{|c| c.applied_stereotypes.any?{|s| s.name =~ /^root$/i} }    
      root_classes.each do |root_class|
      validate_ncname(root_class.name)
      %>
    <xsl:if test="$xml/*[string = '<%= package.name %>.<%= root_class.name %>' and string/@key = '@type']">  
      <<%=ns_prefix %>:<%= root_class.name %>>
	      <xsl:apply-templates select="$xml"/>
      </<%=ns_prefix %>:<%= root_class.name %>>
    </xsl:if>
    <% end %>
	</xsl:template>
<% package.classes.sort_by{|c|c.name}.each do |klass| %>
<%# now do all classes as one %>
<% getDepth = -> (klasses, highest) {
    curHigh = highest;    
    klasses.each {
      |x|
      lastHigh = 0
      if x.children.any?
         lastHigh = getDepth.call(x.children, highest + 1)
      end      
      if (lastHigh > curHigh )        
        curHigh = lastHigh
      end            
    }
    return curHigh
}
%>
<%# the not ensures we don't match any parent types, we will call them explicitly %>
<%# abstracts should have no match!%>
  <xsl:template name="<%=ns_prefix%>:<%= klass.name %>" match="*[string = '<%= package.name %>.<%= klass.name %>' and string/@key = '@type']"<%if klass.children.any?%> priority="<%=getDepth.call(klass.children,1)*-1 %>" <%end%>>
    <xsl:param name="set_type" select="true()" />
<% if klass.parents.empty? && klass.properties.any?{|property| property.association? && property.opposite.is_navigable && !property.opposite.composite? } %>
    <xsl:attribute name="ObjectId">
      <xsl:value-of select="string[@key = '@id']" />
    </xsl:attribute>
<% end %>
<%if klass.parents.any?%>
  <%# Call parent class' template %>
  <%# Must have a xsi:type, so add now %>
    <xsl:if test="$set_type">
      <xsl:attribute name="xsi:type"><%= ns_prefix %>:<%= klass.name %></xsl:attribute>
    </xsl:if>
    <xsl:call-template name="<%=ns_prefix%>:<%=klass.parents.first.name%>">       
      <xsl:with-param name="set_type" select="false()" />
    </xsl:call-template>
<% end %>
<%# Handle implementation of interfaces (these are NOT abstract), which spit out the class name as a tag %>
<% if klass.implements.any? %>
<<%=klass.implements[0].package.name %>:<%= klass.name %>>
<% end %>
<%# Begin UML property enumeration %>

<% klass.properties.sort_by{|p|get_sortable_prop_name(klass,p)}.each do |property| 

%>

<%# Avoid properties (associations) from other direction %>
<% next unless property.is_navigable %>
<% property_name = get_property_name(property, id_suffix, plural_id_suffix) %>
<%# need to hijack this code to handle FGDC spec stuff. Basically need to say there IS simple content, and anything not called Value should get it%>
<% klass_has_simple_content = klass.properties.any?{|p| p.applied_stereotypes.any?{|s| s.name == 'simpleContent'}} %>
<%# must only apply to FGDC spec or it breaks other things! %>
<% klass_has_simple_target = klass.properties.any?{|p| p.name == 'Value'} && ['addr','addr_type'].include?(klass.package.name) %>
<% is_xml_attribute =  (klass_has_simple_target && property.name != 'Value') || (klass_has_simple_content && !property.applied_stereotypes.any?{|s| s.name == 'simpleContent' }) || property.applied_stereotypes.any?{|s| s.name == 'xmlAttribute'} %>
<%# determine if we need to output the property %>
<% if is_xml_attribute %>
    <xsl:if test="boolean(*[@key = '<%= property_name %>'])">  
<% elsif property.applied_stereotypes.any?{|s| s.name == 'simpleContent' } || property.name == 'Value' &&  ['addr','addr_type'].include?(klass.package.name) %>
    <xsl:value-of select="*[@key = '<%= property_name %>']" />
<% next %>
<% else %>
  <xsl:if test="boolean(*[@key = '<%= property_name %>'])">
<% end %>
    <%# if it is an array, then we need to apply special logic %>
    <% calculated_data_type = property.multiple? ? 'array' : get_property_type(property) %>
    <% use_target_namespace = property.applied_stereotypes.any?{|s| s.name == 'useTargetNamespace'} 
    #calculate namespace prefix
    property_ns_package = use_target_namespace ? property.type.package : klass.package
    xml_schema_stereotype = property_ns_package.applied_stereotypes.find{|s| s.name == 'XML Schema'}
    property_ns_prefix = xml_schema_stereotype.applied_tags.find{|t| t.name == 'prefix'}.value rescue 'unk'
    %>
    <% is_idrefs = !property.composite? && property.association? %>
      <% if property.multiple? %>
        <% if is_idrefs %>
        <%# handle the use of IDREFS, which must map to arrays %>
          <<%= property_ns_prefix %>:<%= property_name %>>
              <xsl:variable name="idrefs">
              <xsl:for-each select="*[@key = '<%= property_name %>']/string">
          <% else %>
              <xsl:for-each select="*[@key = '<%= property_name %>']/<%=get_property_type(property)%>"> 
          <% end %>
          <% if get_property_type(property) == 'map' %>
            <%# use anonynomous map %>
          <<%= property_ns_prefix %>:<%= property_name %>>
              <xsl:apply-templates select="." />
            </<%= property_ns_prefix %>:<%= property_name %>>
          <% elsif is_xml_attribute || is_idrefs %>         
              <xsl:value-of select="concat(' ', .)" />         
          <% elsif property.type.primitive? || property.type.enumeration? %>
          <<%= property_ns_prefix %>:<%= property_name %>>
              <xsl:value-of select="."/>
            </<%= property_ns_prefix %>:<%= property_name %>>    
          <% else %>
          <<%= property_ns_prefix %>:<%= property_name %>>
              <xsl:value-of select="*[@key = '<%= property_name %>']"/>
            </<%= property_ns_prefix %>:<%= property_name %>>    
          <% end %>                        
          </xsl:for-each>
          <%# handle closure of idrefs (one for all array items)%>
          <% if is_idrefs %>
            </xsl:variable>
            <xsl:value-of select="normalize-space($idrefs)" />
            </<%= property_ns_prefix %>:<%= property_name %>>    
          <% end %>
        <%# Single %>
        <%else%>
        <%# Add extra conditional, because we only need tags for non-XML attributes %>
        <% if is_xml_attribute %>
            <xsl:attribute name="<%= property_name %>">
              <xsl:value-of select="*[@key = '<%= property_name %>']" />
            </xsl:attribute>
        <%else%>
          <<%= property_ns_prefix %>:<%= property_name %>>
            <% if get_property_type(property) == 'map' %>
              <xsl:apply-templates select="*[@key = '<%= property_name %>']" />
            <% else %>
              <xsl:value-of select="*[@key = '<%= property_name %>']"/>
            <% end %>
          </<%= property_ns_prefix %>:<%= property_name %>>
          <% end %>
        <% end %>
</xsl:if>
<% end %>
<% if klass.implements.any? %>
</<%=klass.implements[0].package.name%>:<%= klass.name %>>
<% end %>
  </xsl:template>
<% end %>
<% end %>
<% end %>
</xsl:stylesheet>