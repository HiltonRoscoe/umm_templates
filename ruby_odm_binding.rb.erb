design = model.getDesign();
<% require 'active_support/inflector'
%>
<% xml_schema_stereotype = @all_packages.collect{|p| p.applied_stereotypes}.flatten.find{|s| s.name == 'XML Schema'}
  @outer_module = @locals[:outer_module] || 'OuterModule'
  object_id_attr = xml_schema_stereotype.applied_tags.find{|t| t.name == 'id_attribute_name'}.value
  id_suffix = xml_schema_stereotype.applied_tags.find{|t| t.name == 'id_suffix_for_references'}.value rescue 'Id'
  plural_id_suffix = xml_schema_stereotype.applied_tags.find{|t| t.name == 'id_suffix_for_plural_references'}.value rescue 'Ids'
  version = @locals[:version]
  version ||= 'v' + @all_packages.collect{|p| p.applied_stereotypes}.flatten.find{|s| s.name == 'XML Schema'}.applied_tags.find{|t| t.name == 'major_version'}.value rescue nil
  raise "You must specify a version for the domain model" unless version

  def get_property_name(property, singular_id_suffix, plural_id_suffix, pluralize_roles = false, underscore = false)
  	name = property.name
    name ||= property.type.name
    name = name.underscore if underscore
    if property.association? && !(property.attribute? || property.composite?)
      id_suffix = property.multiple? ? plural_id_suffix : singular_id_suffix
      name = name + id_suffix 
    else
      name = name.pluralize if property.multiple? && pluralize_roles 
    end
    name 
  end

  def get_default_value(property)
    if property.multiple?
      ", :default => []"
    end
  end

  def get_property_type2(property)
    time_types = [UmlMetamodel::PRIMITIVES[:datetime], UmlMetamodel::PRIMITIVES[:date], UmlMetamodel::PRIMITIVES[:time]]
    is_time_type = property.type.primitive? && time_types.include?(property.type.base_primitive)
    if is_time_type
      ", :type => :#{property.type.base_primitive.name.downcase}"
    elsif !(property.type.primitive? || property.type.enumeration? || (property.association? && !(property.attribute? || property.composite?))) # This may not cover all necessary cases
      ", :type => '#{@outer_module}::#{property.type.qualified_name}'"
    end
  end

  def get_property_type(property)
    if !(property.type.primitive? || property.type.enumeration? || (property.association? && !(property.attribute?) && !(property.composite?))) # This may not cover all necessary cases
      "ERR"
    elsif property.type.primitive? && [UmlMetamodel::PRIMITIVES[:integer], UmlMetamodel::PRIMITIVES[:int]].include?(property.type.base_primitive)
      "Integer"
    elsif property.type.primitive? && [UmlMetamodel::PRIMITIVES[:float], UmlMetamodel::PRIMITIVES[:double]].include?(property.type.base_primitive)
      "NUMERIC"
    elsif property.type.primitive? && [UmlMetamodel::PRIMITIVES[:boolean]].include?(property.type.base_primitive)
      "Boolean"
    elsif property.type.primitive? && [UmlMetamodel::PRIMITIVES[:string]].include?(property.type.base_primitive)
      "String"
    elsif property.type.primitive? && [UmlMetamodel::PRIMITIVES[:datetime]].include?(property.type.base_primitive)
      "Timestamp"
    elsif property.type.primitive? && [UmlMetamodel::PRIMITIVES[:byte]].include?(property.type.base_primitive)
      "BLOB"
    else
      "String"
    end
  end
%>

<% @all_packages.each do |package| %>
// create enumerations
<% package.enumerations.sort_by{|c|c.name}.each do |enumeration| %>
{
  domain = design.createDomain();
  domain.name = "<%= enumeration.name %>";
  ce = domain.createConstraintEnumeration();
  <% enumeration.all_literals.each do |literal| %>
    ce.add("<%= literal.name %>","");
  <% end %>
}
domain.setValueList(ce);
type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("String");
domain.setLogicalDatatype(type);
// a reasonable length for enumeration values
domain.setDataTypeSize(50);
<% end %>
// create entities
<% package.classes.sort_by{|c|c.name}.each do |klass| %>
entity = model.createEntity();
entity.setName("<%= klass.name %>");
// color for regular entity
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(199/360,0.35,0.90));

<% if klass.is_abstract %>
entity.setCompleteSubtypes(true);
<% end %>
<%# entity.setCommentInRDBMS( klass.documentation.dump %>
// create attributes under entity
<% klass.properties.sort_by{|p|(p.name || p.type.name).underscore}.each do |property| %>
<%# don't pull associations, they must be handled seperately %>
<% next unless property.is_navigable && !property.association? %>
<%# don't pull properties with multiplicity > 1, they violate 1NF, will be handled
down the road as associations %>
<% next unless !property.multiple? %>
<% next unless property.type.primitive? || property.type.enumeration? %>
attribute = entity.createAttribute();

attribute.setName("<%= get_property_name(property, id_suffix, plural_id_suffix)%>")
<%# DETERMINE DATA TYPE %>
  <% if property.type.enumeration? %>
  domains = design.getDomainSet();
  domain = domains.getByName("<%= property.type.name%>");
  attribute.setDomain(domain);
  <% elsif property.type.primitive? %>
  // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("<%= get_property_type(property) %>");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
  <% end %>
  <%if property.lower == 1 %>
  attribute.setNullsAllowed(false);
  <% end %>
<% end %>
<% end %>
// DO SECOND PASS OF ENTITIES
<% package.classes.sort_by{|c|c.name}.each do |klass| %>
  <%# do SUPERTYPES %>
  <% if klass.parents.any? %>
  source = model.getEntitySet().getByName("<%=klass.name%>");
  <%# Not worried about mutiple parents, none of the CDF classes have %>
  target = model.getEntitySet().getByName("<%= klass.parents.first.name %>");
  source.setHierarchicalParent(target);
  <% end %>
<%# Build associations %>
<% klass.properties.sort_by{|p|(p.name || p.type.name).underscore}.each do |property| %>
<% next unless property.is_navigable %>
<%# maybe we do this to only get one side? (no dups)%>
<% next unless property.multiple? || property.association? || (!property.type.enumeration? && !property.type.primitive?)  %>
  <%# handle primitives
    CREATE NEW ENTITY WITH ASSOCIATION TO PARENT, will only contain a VALUE column of that specified
    type
   %>
<% if property.type.primitive? || property.type.enumeration? %>
entity = model.createEntity();
sourceName = "<%= klass.name %><%= property.name %>";
entity.setName(sourceName);
<%# use different color for minor entities %>
entity.setUseDefaultColor(false);
entity.setBackgroundColor(java.awt.Color.getHSBColor(0,0,0.90));

<%# refactor! %>
attribute = entity.createAttribute();
attribute.setName("<%= get_property_name(property, id_suffix, plural_id_suffix)%>")
// DETERMINE DATA TYPE
  <% if property.type.enumeration? %>
  domains = design.getDomainSet();
  domain = domains.getByName("<%= property.type.name%>");
  attribute.setDomain(domain);
  <% elsif property.type.primitive? %>
  // primitive type 
  type = model.getDesign().getLogicalDatatypeSet().getLogTypeByName("<%= get_property_type(property) %>");
  attribute.setLogicalDatatype(type);
  attribute.setDomain(null);
  <% end %>
<% else %>
sourceName = "<%= property.type.name %>";
<% end %>
 
  <%# do relation wiring %>
  target = model.getEntitySet().getByName("<%=klass.name %>");
  source = model.getEntitySet().getByName(sourceName);
  relation = model.createRelation();
  relation.setSourceEntity(source);
  relation.setTargetEntity(target);
<% if property.association? %> 
  <% if property.upper > 1  %>
  relation.setSourceCardinalityString("*");
  <% else %>
  relation.setSourceCardinalityString("1");
  <% end %>
  <% if property.opposite.upper > 1 || property.aggregation == :none %>
  relation.setTargetCardinalityString("*");
  <% else %>
  relation.setTargetCardinalityString("1");
  <% end %>
<% elsif property.type.primitive? || property.type.enumeration? %>
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("1");
<% else %>
relation.setSourceCardinalityString("*");
relation.setTargetCardinalityString("*");
<% end %>
  
  <% if property.lower >= 1 %>
    relation.setOptionalTarget(false);
  <% else %>
    relation.setOptionalTarget(true);
  <% end %>
  <%# Is it is composite, then the target must have an identifying relationship with parent
  i.e. it cannot exist without it's parent. Some of this relationships in UML are strictly for
  wiring, while others have semantic meaning %>
  <% if property.aggregation == :composite %>
    relation.setOptionalSource(false);
  <% elsif (property.type.primitive? || property.type.enumeration?) && property.multiple? %>
    relation.setOptionalSource(false);
  <% else %>
    relation.setOptionalSource(true);
  <% end %>
  <% if ((property.name != property.type.name) && !(property.type.enumeration? || property.type.primitive?)) %>
  relation.setNameOnTarget("<%= property.name %>");
  <% end %>
  <%# this is the name the mapping tables will get %>
  relation.setName("<%=klass.name %>_<%= property.type.name %>");
  <% if property.upper > 1 %>
    relation.setProperty("fkRole", "<%= klass.name %>");
  <% else %>
    // will not work for 1<->1 relations with no dominate role
    relation.setProperty("fkRole", "<%= property.name %>");
  <% end %>
<% end %>
<% end %>
<% end %>